<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Créer une Vibration</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>

<script>
    const loc = {
        lat: 0,
        long: 0,
    }

    function updateLocationField() {
        // Mettez à jour la valeur du champ caché avec les coordonnées actuelles de loc
        document.getElementById('location').value = JSON.stringify(loc);
    }

    // Fonction pour obtenir la localisation du périphérique
    function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition);

        } else {
            console.error("La géolocalisation n'est pas supportée par votre navigateur.");
        }
    }

    // Fonction pour afficher la position
    function showPosition(position) {
        console.error("hellloo");
        loc.lat = position.coords.latitude;
        loc.long = position.coords.longitude;

        // Utilisez les coordonnées (latitude, longitude) comme nécessaire
        //console.log("Latitude: " + loc.lat + " Longitude: " + loc.long);
        updateLocationField();

        // Ajoutez votre logique pour utiliser ces coordonnées dans votre application
    }

    // Attend que le DOM soit chargé avant d'appeler getLocation
    document.addEventListener("DOMContentLoaded", async () => {
        navigator.permissions.query({ name: 'geolocation' }).then(val => {
            const { state } = val;
            switch (state) {
                case 'denied':
                    //console.log('privacy first');
                    loc.lat = 46.7781;
                    loc.long = 6.6417;
                    updateLocationField();
                    break;
                default: getLocation();
            }

        });
    });

    function updatePlantsIdsField() {
        const selectedPlantId = document.getElementById('plantSelector').value;

        //console.log(selectedPlantId);
        //console.log('contnu de hidden:', document.getElementById('plantsIds').value);
        document.getElementById('plantsIds').value = selectedPlantId;
    }

    const createDummyAudioBlob = () => {
        const base64Audio = 'dummyBase64Audio';
        const byteCharacters = atob(base64Audio);
        const byteNumbers = new Array(byteCharacters.length);

        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }

        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { type: 'audio/wav' });
        return blob;
    };


    // partie record:
    let mediaRecorder;
    let audioChunks = [];
    let audioBlob = createDummyAudioBlob();
    document.getElementById('audioFile').value = btoa(audioBlob);

    window.addEventListener("DOMContentLoaded", async (event) => {

        document.getElementById('startRecord').addEventListener('click', () => {


            navigator.mediaDevices.getUserMedia({ audio: true })
                .then((stream) => {
                    mediaRecorder = new MediaRecorder(stream);

                    mediaRecorder.ondataavailable = (e) => {
                        if (e.data.size > 0) {
                            audioChunks.push(e.data);
                        }
                    };

                    mediaRecorder.onstop = () => {
                        audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                        audioChunks = [];
                    };

                    mediaRecorder.start();
                    document.getElementById('stopRecord').removeAttribute('disabled');
                    document.getElementById('startRecord').setAttribute('disabled', 'true');
                })
                .catch((err) => {
                    console.error('Erreur lors de l\'obtention de l\'accès au micro :', err);
                });
        });

        document.getElementById('stopRecord').addEventListener('click', () => {
            if (mediaRecorder.state === 'recording') {
                mediaRecorder.stop();
                document.getElementById('startRecord').removeAttribute('disabled');
                document.getElementById('stopRecord').setAttribute('disabled', 'true');
            }
        });
    });


    function sendForm() {
        const to_send = JSON.stringify({
            'name': document.getElementById('name').value,
            'location': document.getElementById('location').value,
            'plantsIds': document.getElementById('plantsIds').value,
            'audioFile': btoa(audioBlob)

        });
        console.log(to_send);

        // Envoie le formulaire à votre API
        fetch('/vibrations/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: to_send
        });
    }


</script>

<body>
    <!-- vibration_creation.ejs -->
    <%- include('widgets/navbar') %>

        <!-- ... contenu de la vue ... -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

        <div class="container mt-5">
            <h1 class="mt-5">Créer une Vibration</h1>

            <form class="mt-3" action="/vibrations/create" method="post">


                <div class="mb-3">
                    <label for="name" class="form-label">Nom :</label>
                    <input type="text" class="form-control" id="name" name="name" required>
                </div>

                <!-- Ajout du champ "location" avec l'objet loc en JSON -->
                <input type="hidden" id="location" name="location">
                <input type="hidden" id="audioFile" name="audioFile">

                <div class="mb-3">
                    <label for="plantSelector" class="form-label">Plante :</label>
                    <select class="form-select" id="plantSelector" required onchange="updatePlantsIdsField()">
                        <% availablesPlants.forEach(plant=> { %>
                            <option value="<%= plant._id %>">
                                <%= plant.name %>
                            </option>
                            <% }); %>
                    </select>
                </div>

                <input type="hidden" id="plantsIds" name="plantsIds">

                <button type="submit" class="btn btn-primary">Créer</button>
            </form>
            <div class="container mt-5">
                <h1>Enregistrement Audio</h1>
                <button id="startRecord" class="btn btn-primary">Commencer l'enregistrement</button>
                <button id="stopRecord" class="btn btn-danger" disabled>Arrêter l'enregistrement</button>
            </div>
        </div>
</body>

</html>